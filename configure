#!/usr/bin/perl
## configure -- part of MBLib

use FindBin qw($Bin);
use lib "$Bin/MBPerl";

use MBBasic;
use File::Path qw(make_path);

my $gConfig = {};

sub Main() {

    # Load static defaults
    $gConfig->{'BUILDROOT'} = 'build';
    $gConfig->{'DEBUG'} = TRUE;

    # Load environment defaults
    foreach my $x ('BUILDROOT', 'TMPDIR', 'DEPROOT',
                   'MBLIB_BUILDDIR', 'MBLIB_DEPDIR',
                   'MBLIB_SRCDIR', 'DEBUG', 'DEFAULT_CFLAGS',
                   'CC', 'CXX', 'USE_CLANG') {
        if (defined($ENV{$x})) {
            $gConfig->{$x} = $ENV{$x};
        }
    }

    # Load dynamic defaults
    if (!$gConfig->{'TMPDIR'}) {
        $gConfig->{'TMPDIR'} = catfile($gConfig->{'BUILDROOT'}, 'tmp');
    }

    if (!$gConfig->{'DEPROOT'}) {
        $gConfig->{'DEPROOT'} = catfile($gConfig->{'BUILDROOT'}, 'deps');
    }

    if (!$gConfig->{'MBLIB_BUILDDIR'}) {
        $gConfig->{'MBLIB_BUILDDIR'} = $gConfig->{'BUILDROOT'};
    }

    if (!$gConfig->{'MBLIB_DEPDIR'}) {
        $gConfig->{'MBLIB_DEPDIR'} = $gConfig->{'DEPROOT'};
    }

    if (!$gConfig->{'MBLIB_SRCDIR'}) {
        $gConfig->{'MBLIB_SRCDIR'} = '.';
    }

    if ( $^O eq 'linux') {
        $gConfig->{'LINUX'} = TRUE;
    } elsif ($^O eq 'darwin') {
        $gConfig->{'MACOS'} = TRUE;
    } else {
        Panic("Unknown OS: $^O\n");
    }

    if ($gConfig->{'DEBUG'}) {
        $gConfig->{'DEFAULT_CFLAGS'} .= " -march=native -Werror -Wall -g";
    } else {
        $gConfig->{'DEFAULT_CFLAGS'} .= " -march=native -O2 -fomit-frame-pointer";
    }

    my $dcc = $gConfig->{'CC'};
    my $dcxx = $gConfig->{'CXX'};
    if ($gConfig->{'USE_CLANG'}) {
        $dcc = 'clang';
        $dcxx = 'clang++';
        $gConfig->{'DEFAULT_CFLAGS'} .= " -Wno-constant-logical-operand";
        $gConfig->{'DEFAULT_CFLAGS'} .= " -Wno-unused-function";
    } else {
        $dcc = 'gcc';
        $dcxx = 'g++';
    }

    if (!$gConfig->{'CC'}) {
        $gConfig->{'CC'} = $dcc;
    }
    if (!$gConfig->{'CXX'}) {
        $gConfig->{'CXX'} = $dcxx;
    }

    #Dump($gConfig);

    #Open files
    make_path($gConfig->{'MBLIB_BUILDDIR'});
    make_path($gConfig->{'TMPDIR'});
    make_path($gConfig->{'MBLIB_DEPDIR'});

    my $cMake;
    my $cHeader;
    open($cMake, '>', 'config.mk') or Panic($!);
    open($cHeader, '>', catfile($gConfig->{'BUILDROOT'}, 'config.h')) or Panic($!);

    # Save Makefile options
    foreach my $x  ('BUILDROOT', 'TMPDIR', 'DEPROOT',
                    'MBLIB_BUILDDIR', 'MBLIB_DEPDIR',
                    'MBLIB_SRCDIR', 'DEFAULT_CFLAGS',
                    'CC', 'CXX') {
        print $cMake "$x=" . $gConfig->{$x} . "\n";
        delete $gConfig->{$x};
    }

    # Save joint MakeFile/Header options
    foreach my $x ('LINUX', 'MACOS', 'DEBUG') {
        if (defined($gConfig->{$x})) {
            print $cMake "$x=" . $gConfig->{$x} . "\n";
            print $cHeader "#define $x " . $gConfig->{$x} . "\n";
        }

        delete $gConfig->{$x};
    }

    # Check for unused keys
    delete $gConfig->{'USE_CLANG'};
    foreach my $x (keys(%{$gConfig})) {
        Panic("Unused key found in gConfig: $x => " . $gConfig->{$x} . "\n");
    }
}

# Call the Main function.
my $exitCode;
eval {
   $exitCode = Main();
}; Panic($@) if $@;
exit $exitCode;
